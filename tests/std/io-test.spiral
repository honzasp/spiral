(program
  (import std)
  (import std.io)
  (import std.test)

  (test "io-file-read" (lambda (t)
    (assert-eqv t (io-file-read "files/fox.txt")
      "quick brown fox jumps over the lazy dog.\n")))

  (test "io-file-open" (lambda (t)
    (var fox (io-file-open "files/fox.txt"))
    (assert t (io? fox))
    (assert-not t (io-eof? fox))
    (assert-not t (io-error? fox))
    (assert-eqv t (io-read-all-str fox) 
      "quick brown fox jumps over the lazy dog.\n")
    (io-close fox)
    
    (var no-fox (io-file-open "files/nonexistent-fox.txt"))
    (assert-not t (io? no-fox))))

  (test "io-file-create" (lambda (t)
    (var bits (io-file-create "files/_bits.txt"))
    (io-write-line bits "01001")
    (io-close bits)
    (assert-eqv t (io-file-read "files/_bits.txt") "01001\n")

    (var bits-2 (io-file-create "files/_bits.txt"))
    (io-write-line bits-2 "10110")
    (io-close bits-2)
    (assert-eqv t (io-file-read "files/_bits.txt") "10110\n")))

  (test "io-file-append" (lambda (t)
    (var parens (io-file-create "files/_parens.txt"))
    (io-write-line parens "(())")
    (io-close parens)
    (assert-eqv t (io-file-read "files/_parens.txt") "(())\n")

    (var parens-2 (io-file-append  "files/_parens.txt"))
    (io-write-line parens-2 "{{{}}}")
    (io-close parens-2)
    (assert-eqv t (io-file-read "files/_parens.txt") "(())\n{{{}}}\n")))

  (test "io?" (lambda (t)
    (var fox (io-file-open "files/fox.txt"))
    (assert t (io? fox))
    (assert-not t (io? "fox"))
    (io-close fox)))

  (test "io-eof?" (lambda (t)
    (var doc (io-file-open "files/stdio.txt"))
    (assert-not t (io-eof? doc))
    (io-read-line doc)
    (assert-not t (io-eof? doc))
    (io-read-line doc)
    (assert-not t (io-eof? doc))
    (io-read-line doc)
    (assert-not t (io-eof? doc))
    (io-read-byte doc)
    (assert t (io-eof? doc))
    (io-close doc)))

  (test "io-error?" (lambda (t)
    (var dev-full (io-file-create "/dev/full"))
    (io-write-byte dev-full 10)
    (io-flush dev-full)
    (assert t (io-error? dev-full))))

  (test "io-write-byte" (lambda (t)
    (var digits (io-file-create "files/_digits.txt"))
    (io-write-byte digits 48)
    (io-write-byte digits 50)
    (io-write-byte digits 52)
    (io-write-byte digits 49)
    (io-write-byte digits 10)
    (io-close digits)
    (assert-eqv t (io-file-read "files/_digits.txt") "0241\n")))

  (test "io-write strings" (lambda (t)
    (var adams (io-file-create "files/_hitchhiker.txt"))
    (io-write adams "It is of course well known that careless talk costs lives, ")
    (io-write adams "but the full\nscale of the")
    (io-write adams " problem is not always appreciated.\n")
    (io-close adams)
    (assert-eqv t (io-file-read "files/_hitchhiker.txt") (str-cat-2
      "It is of course well known that careless talk costs lives, but the full\n"
      "scale of the problem is not always appreciated.\n"))))

  (test "io-write" (lambda (t)
    (var dump (io-file-create "files/_dump.txt"))
    (io-write dump false)
    (io-write dump (tuple-2 10 20))
    (io-write dump "string")
    (io-write dump (cons 1 (cons 2 3)))
    (io-close dump)
    (assert-eqv t (io-file-read "files/_dump.txt")
      "false(tuple-2 10 20)string(1 2 . 3)")))

  (test "io-write-line strings" (lambda (t)
    (var defoe (io-file-create "files/_robinson.txt"))
    (io-write-line defoe "When I waked it was broad day, the weather clear,")
    (io-write-line defoe "and the storm abated, so that the sea did not rage")
    (io-write-line defoe "and swell as before.")
    (io-close defoe)
    (assert-eqv t (io-file-read "files/_robinson.txt") (str-cat-3
      "When I waked it was broad day, the weather clear,\n"
      "and the storm abated, so that the sea did not rage\n"
      "and swell as before.\n"))))

  (test "io-write-line" (lambda (t)
    (var dump (io-file-create "files/_dump-lines.txt"))
    (io-write-line dump false)
    (io-write-line dump (tuple-2 10 20))
    (io-write-line dump "string")
    (io-write-line dump (cons 1 (cons 2 3)))
    (io-close dump)
    (assert-eqv t (io-file-read "files/_dump-lines.txt")
      "false\n(tuple-2 10 20)\nstring\n(1 2 . 3)\n")))

  (test "io-read-byte" (lambda (t)
    (var flies (io-file-open "files/lord_of_the_flies.txt"))
    (assert-eqv t (io-read-byte flies) 67)
    (assert-eqv t (io-read-byte flies) 72)
    (assert-eqv t (io-read-byte flies) 65)
    (assert-eqv t (io-read-byte flies) 80)
    (assert-eqv t (io-read-byte flies) 84)
    (assert-eqv t (io-read-byte flies) 69)
    (assert-eqv t (io-read-byte flies) 82)
    (io-close flies)))

  (test "io-read-str" (lambda (t)
    (var flies (io-file-open "files/lord_of_the_flies.txt"))
    (assert-eqv t (io-read-str flies 10) "CHAPTER ON")
    (assert-eqv t (io-read-str flies 10) "E\nThe Soun")
    (assert-eqv t (io-read-str flies 8)  "d of the")
    (assert-eqv t (io-read-str flies 12) " Shell\n\nThe ")
    (io-close flies)))

  (test "io-read-all-str" (lambda (t)
    (var doc (io-file-open "files/stdio.txt"))
    (io-read-line doc)
    (assert-eqv t (io-read-all-str doc) (str-cat-2
      "and supplies functions with narrow character input/output\n"
      "capabilities.\n"))
    (io-close doc)))

  (test "io-read-line" (lambda (t)
    (var flies (io-file-open "files/lord_of_the_flies.txt"))
    (assert-eqv t (io-read-line flies) "CHAPTER ONE\n")
    (assert-eqv t (io-read-line flies) "The Sound of the Shell\n")
    (assert-eqv t (io-read-line flies) "\n")
    (assert-eqv t (io-read-line flies) 
      "The boy with fair hair lowered himself down the last few feet\n")
    (io-close flies)))

  (test "io-read-word" (lambda (t)
    (var flies (io-file-open "files/lord_of_the_flies.txt"))
    (assert-eqv t (io-read-word flies) "CHAPTER")
    (assert-eqv t (io-read-word flies) "ONE")
    (assert-eqv t (io-read-word flies) "The")
    (assert-eqv t (io-read-word flies) "Sound")
    (assert-eqv t (io-read-word flies) "of")
    (assert-eqv t (io-read-word flies) "the")
    (assert-eqv t (io-read-word flies) "Shell")
    (assert-eqv t (io-read-word flies) "The")
    (assert-eqv t (io-read-word flies) "boy")
    (io-close flies)))

  (test "io-read-int" (lambda (t)
    (var ints (io-file-open "files/ints.txt"))
    (assert-eqv t (io-read-int ints) 0)
    (assert-eqv t (io-read-int ints) 10)
    (assert-eqv t (io-read-int ints) (neg 23))
    (assert-eqv t (io-read-int ints) 21)
    (assert-eqv t (io-read-int ints) 0)
    (assert-eqv t (io-read-int ints) false)
    (assert-eqv t (io-read-word ints) "xbeef")
    (assert-eqv t (io-read-int ints) 20)
    (assert-eqv t (io-read-int ints) false)
    (assert-eqv t (io-read-word ints) "bottles")
    (assert-eqv t (io-read-int ints) 45)
    (assert-eqv t (io-read-int ints) false)
    (assert-eqv t (io-read-word ints) ".32")
    (io-close ints)))

  (test "io-read-number" (lambda (t)
    (var nums (io-file-open "files/numbers.txt"))
    (assert-eqv t (io-read-number nums) 0)
    (assert-eqv t (io-read-number nums) 10)
    (assert-eqv t (io-read-number nums) 23.4)
    (assert-eqv t (io-read-number nums) (neg 9.2))
    (assert-eqv t (io-read-number nums) (neg 3.0))
    (assert-eqv t (io-read-number nums) 23.4)
    (assert-eqv t (io-read-number nums) 0.125)
    (assert-eqv t (io-read-number nums) 10)
    (assert-eqv t (io-read-number nums) false)
    (assert-eqv t (io-read-word nums) ",2")
    (io-close nums))))
    
