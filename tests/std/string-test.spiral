(program
  (import std)
  (import std.string)
  (import std.test)

  (println "Spiral")

  (test "str-len" (lambda (t)
    (assert-eq t (str-len "foo") 3)
    (assert-eq t (str-len "") 0)
    (assert-eq t (str-len "123456") 6)))

  (test "str-get" (lambda (t)
    (assert-eq t (str-get "\n" 0) 10)
    (assert-eq t (str-get "Spiral" 2) 105)
    (assert-eq t (str-get "quick brown fox" 12) 102)))

  (test "str-cat-..." (lambda (t)
    (assert-eqv t (str-cat-0) "")
    (assert-eqv t (str-cat-1 "quick") "quick")
    (assert-eqv t (str-cat-2 "quick" "brown") "quickbrown")
    (assert-eqv t (str-cat-3 "quick" "brown" "fox") "quickbrownfox")
    (assert-eqv t (str-cat-8 "qui" "c" "" "kbr" "" "" "own" "fox") "quickbrownfox")))

  (test "stringify number" (lambda (t)
    (assert-eqv t (stringify 10) "10")
    (assert-eqv t (stringify 3.0) "3")
    (assert-eqv t (stringify 3.14) "3.14")
    (assert-eqv t (stringify 1_000_000_000.0) "1e+09")))

  (test "stringify string" (lambda (t)
    (assert-eqv t (stringify "a string") "a string")))

  (test "stringify array" (lambda (t)
    (import std.array)
    (var a (array-new))
    (array-push! a 10)
    (array-push! a "two")
    (array-push! a 3.14)
    (assert-eqv t (stringify a) "[10 two 3.14]")))

  (test "stringify tuple" (lambda (t)
    (import std.tuple)
    (assert-eqv t (stringify (tuple-0)) "(tuple-0)")
    (assert-eqv t (stringify (tuple-1 10)) "(tuple-1 10)")
    (assert-eqv t (stringify (tuple-2 "pi" 3.14)) "(tuple-2 pi 3.14)")
    (assert-eqv t (stringify (tuple-4 1 2 3 4)) "(tuple-4 1 2 3 4)")))

  (test "stringify cons" (lambda (t)
    (assert-eqv t (stringify (cons 10 20)) "(10 . 20)")
    (assert-eqv t (stringify (cons 1 (cons 2 (cons 3 false)))) "(1 2 3)")
    (assert-eqv t (stringify (cons (cons 1 2) (cons 3 4))) "((1 . 2) 3 . 4)")))

  (test "stringify fun" (lambda (t)
    (assert-eqv t (stringify +) "<fun>")
    (assert-eqv t (stringify (lambda (x) (+ x x))) "<fun>")))

  (test "stringify bool" (lambda (t)
    (assert-eqv t (stringify true) "true")
    (assert-eqv t (stringify false) "false"))))
