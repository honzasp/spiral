(program
  (import std)
  (import std.map)
  (import std.test)
  (import std.cons)
  (import std.string)

  (test "map?" (lambda (t)
    (assert t (map? (map-new str-cmp)))
    (assert-not t (map? "not a map"))))

  (test "map-len" (lambda (t)
    (var m1 (map-from-assoc str-cmp
      (cons (cons "one" 1)
      (cons (cons "two" 2)
      null))))
    (assert-eq t (map-len m1) 2)))

  (test "map-get" (lambda (t)
    (var m (map-from-assoc str-cmp
      (cons (cons "one" 1)
      (cons (cons "two" 2)
      (cons (cons "three" 3)
      null)))))
    (assert-eqv t (map-get m "two") 2)
    (assert-eqv t (map-get m "three") 3)
    (assert-eqv t (map-get m "four") false)))

  (test "map-get-or" (lambda (t)
    (var m (map-from-assoc str-cmp
      (cons (cons "one" 1)
      (cons (cons "two" 2)
      null))))
    (assert-eqv t (map-get-or m "two" (lambda () 100)) 2)
    (assert-eqv t (map-get-or m "three" (lambda () 300)) 300)))

  (test "map-set" (lambda (t)
    (let ((m1 (map-new -))
          (m2 (map-set m1 10 "ten"))
          (m3 (map-set m2 20 "twenty"))
          (m4 (map-set m3 10 "five plus five"))
          (m5 (map-set m3 20 "two times ten")))
      (assert-eqv t (map-get m2 10) "ten")
      (assert-eqv t (map-get m3 10) "ten")
      (assert-eqv t (map-get m4 10) "five plus five")
      (assert-eqv t (map-get m5 10) "ten")
      (assert-eqv t (map-get m3 20) "twenty")
      (assert-eqv t (map-get m4 20) "twenty")
      (assert-eqv t (map-get m5 20) "two times ten"))))

  (test "big map of integers" (lambda (t)
    (let ((m (do ((i 0 (+ i 1))
                  (m (map-new -)
                     (map-set m (mod (* i 50) 137) i)))
                 ((>= i 137) m))))
      (do ((k 0 (+ k 1)))
          ((>= k 137))
        (let ((i (map-get m k)))
          (assert-eqv t (mod (* i 50) 137) k))))))

  (test "big map of strings" (lambda (t)
    (let ((m (do ((i 0 (+ i 1))
                  (m (map-new str-cmp) 
                     (let ((k (mod (* i 50) 131)))
                       (map-set m (stringify k) k))))
                 ((>= i 131) m))))
      (do ((k 0 (+ k 1)))
          ((>= k 131))
        (assert-eqv t (map-get m (stringify k)) k))))))
