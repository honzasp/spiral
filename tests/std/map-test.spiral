(program
  (import std)
  (import std.map)
  (import std.test)
  (import std.cons)
  (import std.string)

  (test "map?" (lambda (t)
    (assert t (map? (map-new str-cmp)))
    (assert-not t (map? "not a map"))))

  (test "map-len" (lambda (t)
    (var m1 (map-from-assoc str-cmp
      (cons (cons "one" 1)
      (cons (cons "two" 2)
      null))))
    (assert-eq t (map-len m1) 2)))

  (test "map-empty?" (lambda (t)
    (assert t (map-empty? (map-new -)))
    (assert-not t (map-empty? (map-from-assoc - (cons (cons 1 "one") null))))))

  (test "map-get" (lambda (t)
    (var m (map-from-assoc str-cmp
      (cons (cons "one" 1)
      (cons (cons "two" 2)
      (cons (cons "three" 3)
      null)))))
    (assert-eqv t (map-get m "two") 2)
    (assert-eqv t (map-get m "three") 3)
    (assert-eqv t (map-get m "four") false)))

  (test "map-get-or" (lambda (t)
    (var m (map-from-assoc str-cmp
      (cons (cons "one" 1)
      (cons (cons "two" 2)
      null))))
    (assert-eqv t (map-get-or m "two" (lambda () 100)) 2)
    (assert-eqv t (map-get-or m "three" (lambda () 300)) 300)))

  (test "map-set" (lambda (t)
    (let ((m1 (map-new -))
          (m2 (map-set m1 10 "ten"))
          (m3 (map-set m2 20 "twenty"))
          (m4 (map-set m3 10 "five plus five"))
          (m5 (map-set m3 20 "two times ten")))
      (assert-eqv t (map-get m2 10) "ten")
      (assert-eqv t (map-get m3 10) "ten")
      (assert-eqv t (map-get m4 10) "five plus five")
      (assert-eqv t (map-get m5 10) "ten")
      (assert-eqv t (map-get m3 20) "twenty")
      (assert-eqv t (map-get m4 20) "twenty")
      (assert-eqv t (map-get m5 20) "two times ten")
      (assert-not t (map-validate m1))
      (assert-not t (map-validate m2))
      (assert-not t (map-validate m3))
      (assert-not t (map-validate m4))
      (assert-not t (map-validate m5)))))

  (test "map-contains?" (lambda (t)
    (let ((m1 (map-from-assoc -
                (cons (cons 10 "ten")
                (cons (cons 20 "twenty")
                (cons (cons 30 "thirty")
                (cons (cons 40 "forty")
                (cons (cons 50 "fifty")
                 null))))))))
      (assert-not t (map-validate m1))
      (assert t (map-contains? m1 10))
      (assert t (map-contains? m1 50))
      (assert-not t (map-contains? m1 60))
      (assert-not t (map-contains? m1 25)))))

  (test "map-remove" (lambda (t)
    (let ((m1 (map-from-assoc -
                (cons (cons 10 "ten")
                (cons (cons 20 "twenty")
                (cons (cons 30 "thirty")
                (cons (cons 40 "forty")
                (cons (cons 50 "fifty")
                 null)))))))
          (m2 (map-remove m1 20))
          (m3 (map-remove m2 40))
          (m4 (map-remove m3 20)))
      (assert-not t (map-contains? m4 20))
      (assert-not t (map-contains? m4 40))
      (assert-not t (map-contains? m3 40))
      (assert t (map-contains? m2 40))
      (assert-not t (map-validate m1))
      (assert-not t (map-validate m2))
      (assert-not t (map-validate m3))
      (assert-not t (map-validate m4)))))

  (test "big map of integers" (lambda (t)
    (let ((m (do ((i 0 (+ i 1))
                  (m (map-new -)
                     (map-set m (mod (* i 13) 137) i)))
                 ((>= i 137) m)
                (assert-not t (map-validate m))))
          (m (do ((i 0 (+ i 2))
                  (m m (map-remove m i)))
                 ((>= i 137) m)
                (assert-not t (map-validate m)))))
      (do ((k 0 (+ k 1)))
          ((>= k 137))
        (if (== 0 (mod k 2))
          (assert-not t (map-contains? m k))
          (let ((i (map-get m k)))
            (assert-eqv t (mod (* i 13) 137) k)))))))

  (test "big map of strings" (lambda (t)
    (let ((m (do ((i 0 (+ i 1))
                  (m (map-new str-cmp) 
                     (let ((k (mod (* i 50) 131)))
                       (map-set m (stringify k) k))))
                 ((>= i 131) m))))
      (do ((k 0 (+ k 1)))
          ((>= k 131))
        (assert-eqv t (map-get m (stringify k)) k))))))
