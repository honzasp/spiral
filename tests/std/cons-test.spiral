(program
  (import std)
  (import std.cons)
  (import std.test)

  (test "c..r" (lambda (t)
    (assert-eq t (car (cons 10 20)) 10)
    (assert-eq t (cdr (cons 10 20)) 20)
    (assert-eq t (caar (cons (cons 1 2) 3)) 1)
    (assert-eq t (cadr (cons 1 (cons 2 3))) 2)
    (assert-eq t (cdar (cons (cons 1 2) 3)) 2)
    (assert-eq t (cddr (cons 1 (cons 2 3))) 3)))

  (test "cons?" (lambda (t)
    (assert t (cons? (cons 1 2)))
    (assert-not t (cons? 10))
    (assert-not t (cons? (tuple-2 1 2)))))
    
  (test "list?" (lambda (t)
    (assert t (list? null))
    (assert t (list? (cons 1 null)))
    (assert t (list? (cons 1 (cons 2 (cons 3 null)))))
    (assert-not t (list? 10))
    (assert-not t (list? (cons 1 (cons 2 3))))))

  (test "list-len" (lambda (t)
    (assert-eq t (list-len null) 0)
    (assert-eq t (list-len (cons 1 (cons 2 (cons 3 null)))) 3)))

  (test "list-tail" (lambda (t)
    (var as (cons "a" (cons "b" (cons "c" null))))
    (assert-eqv t (list-tail as 0) as)
    (assert-eqv t (list-tail (cons "x" (cons "y" as)) 2) as)))

  (test "list-get" (lambda (t)
    (var abc (cons "a" (cons "b" (cons "c" null))))
    (assert-eqv t (list-get abc 0) "a")
    (assert-eqv t (list-get abc 2) "c")))

  (test "list-repeated" (lambda (t)
    (assert-equal t (list-repeated "b" 0) null)
    (assert-equal t (list-repeated "a" 3) (cons "a" (cons "a" (cons "a" null))))))

  (test "list-append" (lambda (t)
    (var ab (cons "a" (cons "b" null)))
    (var cd (cons "c" (cons "d" null)))
    (var abcd (cons "a" (cons "b" (cons "c" (cons "d" null)))))
    (assert-eqv t (list-append null ab) ab)
    (assert-equal t (list-append ab cd) abcd)
    (assert-eqv t (cddr (list-append ab cd)) cd)))

  (test "list-reverse" (lambda (t)
    (var abc (cons "a" (cons "b" (cons "c" null))))
    (var cba (cons "c" (cons "b" (cons "a" null))))
    (assert-equal t (list-reverse null) null)
    (assert-equal t (list-reverse abc) cba)))

  (test "member-..." (lambda (t)
    (var primes (cons 2 (cons 3 (cons 5 (cons 7 (cons 11 null))))))
    (assert t (member-eqv 5 primes))
    (assert-not t (member-eqv 4 primes))
    (assert-equal t (member-eqv 5 primes) (cons 5 (cons 7 (cons 11 null))))
    (assert-not t (member-cmp (lambda (x) (> x 20)) primes))
    (assert t (member-cmp (lambda (x) (== x 5)) primes))

    (var tuples (cons (tuple-1 "a") (cons (tuple-1 "b") (cons (tuple-1 "c") null))))
    (assert-not t (member-eqv (tuple-1 "b") tuples))
    (assert t (member-equal (tuple-1 "b") tuples))))

  (test "assoc-..." (lambda (t)
    (var nums (cons (cons "one" 1) (cons (cons "two" 2) (cons (cons "three" 3) null))))
    (assert t (assoc-eqv "one" nums))
    (assert-eq t (assoc-eqv "three" nums) 3)
    (assert-not t (assoc-eqv "five" nums))

    (var t1 (tuple-1 "t1"))
    (var t2 (tuple-1 "t2"))
    (var t3 (tuple-1 "t3"))
    (var ts (cons (cons t1 100) (cons (cons t2 200) (cons (cons t3 300) null))))
    (assert-eq t (assoc-equal (tuple-1 "t2") ts) 200)
    (assert-not t (assoc-eqv (tuple-1 "t2") ts)))))
