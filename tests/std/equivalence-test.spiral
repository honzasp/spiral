(program
  (import std)
  (import std.test)

  (fun check-== (t a b)
    (assert t (== a b))
    (assert-not t (/= a b))
    (assert t (eqv? a b))
    (assert t (equal? a b)))
  (fun check-not-== (t a b)
    (assert-not t (== a b))
    (assert t (/= a b))
    (assert-not t (eqv? a b))
    (assert-not t (equal? a b)))
  (fun check-eqv (t a b)
    (assert t (eqv? a b))
    (assert t (equal? a b)))
  (fun check-not-equal (t a b)
    (assert-not t (eqv? a b))
    (assert-not t (equal? a b)))
  (fun check-just-equal (t a b)
    (assert-not t (eqv? a b))
    (assert t (equal? a b)))

  (test "equivalent numbers" (lambda (t)
    (check-== t 10 10)
    (check-not-== t 10 20)
    (check-== t 2 2.0)
    (check-== t 5.0 5)
    (check-== t 3.14 3.14)
    (check-not-== t 3.2 3)
    (check-not-== t 2.34 3.4)))

  (test "equivalent strings" (lambda (t)
    (check-eqv t "" "")
    (check-eqv t "foo" "foo")
    (check-not-equal t "foo" "bar")
    (check-not-equal t "foo" "fooo")
    (check-not-equal t "foooo" "foo")
    (check-not-equal t "blah" 10)
    (check-not-equal t "100" 100)))

  (test "equivalent arrays" (lambda (t)
    (import std.array)
    (fun make-an-array (n)
      (var a (array-new))
      (do ((i 0 (+ i 1)))
          ((>= i n) a)
        (array-push! a i)))
    (var ary-2-a (make-an-array 2))
    (var ary-2-b (make-an-array 2))
    (var ary-3 (make-an-array 3))
    (var ary-5 (make-an-array 5))

    (check-eqv t ary-3 ary-3)
    (check-just-equal t ary-2-a ary-2-b)
    (check-not-equal t ary-3 ary-5)))

  (test "equivalent other objects" (lambda (t)
    (assert-not t "not implemented"))))
