(program
  (import std)
  (import std.test)

  (fun check-== (t a b)
    (assert t (== a b))
    (assert-not t (/= a b))
    (assert t (eqv? a b))
    (assert t (equal? a b))
    (assert t (== b a))
    (assert-not t (/= b a))
    (assert t (eqv? b a))
    (assert t (equal? b a)))
  (fun check-not-== (t a b)
    (assert-not t (== a b))
    (assert t (/= a b))
    (assert-not t (eqv? a b))
    (assert-not t (equal? a b))
    (assert-not t (== b a))
    (assert t (/= b a))
    (assert-not t (eqv? b a))
    (assert-not t (equal? b a)))
  (fun check-eqv (t a b)
    (assert t (eqv? a b))
    (assert t (equal? a b))
    (assert t (eqv? b a))
    (assert t (equal? b a)))
  (fun check-not-equal (t a b)
    (assert-not t (eqv? a b))
    (assert-not t (equal? a b))
    (assert-not t (eqv? b a))
    (assert-not t (equal? b a)))
  (fun check-just-equal (t a b)
    (assert-not t (eqv? a b))
    (assert t (equal? a b))
    (assert-not t (eqv? b a))
    (assert t (equal? b a)))

  (test "equivalent numbers" (lambda (t)
    (check-== t 10 10)
    (check-not-== t 10 20)
    (check-== t 2 2.0)
    (check-== t 5.0 5)
    (check-== t 3.14 3.14)
    (check-not-== t 3.2 3)
    (check-not-== t 2.34 3.4)))

  (test "equivalent strings" (lambda (t)
    (check-eqv t "" "")
    (check-eqv t "foo" "foo")
    (check-not-equal t "foo" "bar")
    (check-not-equal t "foo" "fooo")
    (check-not-equal t "foooo" "foo")
    (check-not-equal t "blah" 10)
    (check-not-equal t "100" 100)))

  (test "equivalent arrays" (lambda (t)
    (import std.array)
    (fun make-an-array (n)
      (var a (array-new))
      (do ((i 0 (+ i 1)))
          ((>= i n) a)
        (array-push! a i)))
    (var ary-2-a (make-an-array 2))
    (var ary-2-b (make-an-array 2))
    (var ary-3 (make-an-array 3))
    (var ary-5 (make-an-array 5))
    (check-eqv t ary-3 ary-3)
    (check-just-equal t ary-2-a ary-2-b)
    (check-not-equal t ary-3 ary-5)))

  (test "equivalent tuples" (lambda (t)
    (import std.tuple)
    (var a0 (tuple-0))
    (var b0 (tuple-0))
    (var a2 (tuple-2 "pi" 3.14))
    (var b2 (tuple-2 "pi" 3.14))
    (var a3 (tuple-3 a2 b2 100))
    (var b3 (tuple-3 b2 a2 100))
    (var c3 (tuple-3 a2 a0 20))
    (check-eqv t a2 a2)
    (check-eqv t b3 b3)
    (check-just-equal t a0 b0)
    (check-just-equal t a2 b2)
    (check-just-equal t a3 b3)
    (check-not-equal t a0 a2)
    (check-not-equal t c3 a3)))

  (test "equivalent cons" (lambda (t)
    (var c0 (cons "a" "b"))
    (var c1 (cons "a" "b"))
    (var c2 (cons 10 (cons 20 false)))
    (var c3 (cons (cons 1 2) (cons 3 4)))
    (var c4 (cons 10 (cons 20 false)))
    (check-eqv t c0 c0)
    (check-eqv t c2 c2)
    (check-just-equal t c0 c1)
    (check-just-equal t c2 c4)
    (check-not-equal t c3 c4)
    (check-not-equal t c0 c2)))

  (test "equivalent funs" (lambda (t)
    (var a (+ 1 1))
    (var f0 +)
    (var f1 cons)
    (var f2 (lambda (x) (+ x a)))
    (var f3 (lambda (x) (+ x a)))
    (fun make-closure () (lambda (x) (+ x a)))
    (var f4 (make-closure))
    (var f5 (make-closure))
    (check-eqv t f0 f0)
    (check-eqv t f2 f2)
    (check-eqv t f4 f4)
    (check-not-equal t f0 f1)
    (check-not-equal t f2 f3)
    (check-not-equal t f4 f5)))
    
  (test "equivalent refs" (lambda (t)
    (var r0 (ref-new 100))
    (var r1 (ref-new 100))
    (var r2 (ref-new (cons "a" "b")))
    (var r3 (ref-new (cons "a" "b")))
    (check-eqv t r0 r0)
    (check-eqv t r2 r2)
    (check-just-equal t r0 r1)
    (check-just-equal t r2 r3)
    (check-not-equal t r0 r2)))
    
  (test "equivalent syms" (lambda (t)
    (var s0 (sym-new "one"))
    (var s1 (sym-new "one"))
    (var s2 (sym-new 1000))
    (check-not-equal t s0 s1)
    (check-not-equal t s0 s1)
    (check-eqv t s0 s0)
    (check-eqv t s2 s2))))
