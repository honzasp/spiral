(program
  (import std)
  (import std.test)
  (import std.hashmap)
  (import std.hash)

  (test "hashmap?" (lambda (t)
    (assert t (hashmap? (hashmap-new hash-int ==)))
    (assert-not t (hashmap? "not a hashmap"))))

  (test "hashmap-len" (lambda (t)
    (var h0 (hashmap-new hash-int ==))
    (hashmap-set! h0 1 "one")
    (hashmap-set! h0 10 "ten")
    (hashmap-set! h0 100 "hundred")
    (hashmap-set! h0 1000 "thousand")
    (assert-eqv t (hashmap-len h0) 4)))

  (test "hashmap-empty?" (lambda (t)
    (var h0 (hashmap-new hash-int ==))
    (var h1 (hashmap-new hash-int ==))
    (hashmap-set! h0 1 "one")
    (hashmap-set! h0 10 "ten")
    (assert-not t (hashmap-empty? h0))
    (assert t (hashmap-empty? h1))))

  (test "hashmap-get" (lambda (t)
    (var h0 (hashmap-new hash-int ==))
    (hashmap-set! h0 1 "one")
    (hashmap-set! h0 10 "ten")
    (hashmap-set! h0 100 "hundred")
    (hashmap-set! h0 1000 "thousand")
    (assert-eqv t (hashmap-get h0 10) "ten")
    (assert-eqv t (hashmap-get h0 100) "hundred")))

  (test "hashmap-get-or" (lambda (t)
    (var h0 (hashmap-new hash-int ==))
    (hashmap-set! h0 1 "one")
    (hashmap-set! h0 10 "ten")
    (hashmap-set! h0 100 "hundred")
    (hashmap-set! h0 1000 "thousand")
    (assert-eqv t (hashmap-get-or h0 10 (lambda () "foo")) "ten")
    (assert-eqv t (hashmap-get-or h0 200 (lambda () "too much")) "too much")))

  (test "hashmap-contains?" (lambda (t)
    (var h0 (hashmap-new hash-int ==))
    (hashmap-set! h0 2 "two")
    (hashmap-set! h0 3 "three")
    (hashmap-set! h0 5 "five")
    (hashmap-set! h0 7 "seven")
    (hashmap-set! h0 11 "eleven")
    (hashmap-set! h0 13 "thirteen")
    (assert t (hashmap-contains? h0 11))
    (assert t (hashmap-contains? h0 7))
    (assert-not t (hashmap-contains? h0 8))
    (assert-not t (hashmap-contains? h0 4))))

  (test "hashmap-remove!" (lambda (t)
    (var h0 (hashmap-new hash-int ==))
    (hashmap-set! h0 5 "five")
    (hashmap-set! h0 7 "seven")
    (hashmap-set! h0 11 "eleven")
    (hashmap-set! h0 13 "thirteen")
    (assert t (hashmap-remove! h0 7))
    (assert t (hashmap-remove! h0 11))
    (assert-not t (hashmap-remove! h0 20))
    (assert-eqv t (hashmap-len h0) 2)
    (assert t (hashmap-contains? h0 13))
    (assert-not t (hashmap-contains? h0 7))))

  (test "big hashmap of integers" (lambda (t)
    (var h0 (hashmap-new hash-int ==))
    (var prime-1 593)
    (var prime-2 1109)
    (var prime-3 331)
    (fun k-from-i (i)
      (* prime-2 (mod (* i 12345) prime-1)))
    (do ((i 0 (+ i 1)))
        ((>= i prime-1))
      (hashmap-set! h0 (k-from-i i) i))
    (do ((i 0 (+ i 1)))
        ((>= i prime-3))
      (hashmap-remove! h0 (k-from-i i)))
    (assert-eqv t (hashmap-len h0) (- prime-1 prime-3))
    (do ((i 0 (+ i 1)))
        ((>= i prime-1))
      (if (< i prime-3)
        (assert-not t (hashmap-contains? h0 (k-from-i i)))
        (assert-eqv t (hashmap-get h0 (k-from-i i)) i))))))
         
        
