(program
  (fun sum-vec (vec)
    (do  ((i 0 (+ i 1))
          (sum 0 (+ sum (vec-get vec i))))
        ((>= i (vec-length vec))
          sum)))

  (let ((v1 (vec-make 5)))
    (vec-set! v1 0 10)
    (vec-set! v1 1 20)
    (vec-set! v1 2 8)
    (vec-set! v1 3 11)
    (vec-set! v1 4 5)
    (println (sum-vec v1)))

  (fun dot-product (vec1 vec2)
    (do  ((i 0 (+ i 1))
          (sum 0 (+ sum (*
            (vec-get vec1 i)
            (vec-get vec2 i)))))
        ((>= i (vec-length vec1))
          sum)))

  (let ((v1 (vec-make 3))
        (v2 (vec-make 3)))
    (vec-set! v1 0 10)
    (vec-set! v1 1 15)
    (vec-set! v1 2 20)
    (vec-set! v2 0 3)
    (vec-set! v2 1 5)
    (vec-set! v2 2 1)
    (println (dot-product v1 v2)))
    
  (let ((v1 (vec-make 3)))
    (vec-set! v1 1 100)
    (vec-set! v1 2 200)
    (println v1))
)
