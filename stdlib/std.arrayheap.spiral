(module std.arrayheap
  (import std)
  (import std.array)

  (var :arrayheap (sym-new "arrayheap"))
  (fun arrayheap-make (cmp array)
    (tuple-3 :arrayheap cmp array))
  (fun arrayheap? (ah)
    (and (tuple-3? ah) (eqv? (get-0 ah) :arrayheap)))
  (fun arrayheap-cmp (ah) (get-1 ah))
  (fun arrayheap-array (ah) (get-2 ah))

  (fun arrayheap-new (cmp)
    (arrayheap-make cmp (array-new)))
  (export arrayheap? arrayheap-new)

  (fun arrayheap-len (ah)
    (array-len (arrayheap-array ah)))
  (fun arrayheap-empty? (ah)
    (array-empty? (arrayheap-array ah)))
  (export arrayheap-len arrayheap-empty?)

  (fun bubble-up (cmp array idx key)
    (when (> idx 0)
      (let ((parent-idx (div (- idx 1) 2))
            (parent-key (array-get array parent-idx))
            (order (cmp key parent-key)))
        (when (< order 0)
          (array-swap! array idx parent-idx)
          (bubble-up cmp array parent-idx key)))))

  (fun bubble-down (cmp array len idx key)
    (let ((left-idx (+ 1 (* 2 idx)))
          (right-idx (+ 1 left-idx)))
      (cond
        ((== right-idx len)
          (let ((left-key (array-get array left-idx)))
            (when (> (cmp key left-key) 0)
              (array-swap! array idx left-idx))))
        ((< right-idx len)
          (let ((left-key (array-get array left-idx))
                (right-key (array-get array right-idx))
                (left-order (cmp key left-key))
                (right-order (cmp key right-key)))
            (when (or (> left-order 0) (> right-order 0))
              (if (< (cmp left-key right-key) 0)
                (begin (array-swap! array left-idx idx)
                        (bubble-down cmp array len left-idx key))
                (begin (array-swap! array right-idx idx)
                        (bubble-down cmp array len right-idx key)))))))))

  (fun arrayheap-insert! (ah key)
    (let ((cmp (arrayheap-cmp ah))
          (array (arrayheap-array ah)))
      (array-push! array key)
      (bubble-up cmp array (- (array-len array) 1) key)))
  (fun arrayheap-minimum (ah)
    (array-get (arrayheap-array ah) 0))
  (fun arrayheap-remove-minimum! (ah)
    (let ((cmp (arrayheap-cmp ah))
          (array (arrayheap-array ah))
          (minimum (array-get array 0))
          (len (- (array-len array) 1)))
      (array-swap! array 0 len)
      (array-pop! array)
      (when (> len 0)
        (bubble-down cmp array len 0 (array-get array 0)))
      minimum))
  (export arrayheap-insert! arrayheap-minimum arrayheap-remove-minimum!)

  (fun arrayheap-from-array (cmp ary)
    (let ((array (array-copy ary))
          (len (array-len ary)))
      (do ((i 0 (+ i 1)))
          ((>= i len))
        (bubble-up cmp array i (array-get array i)))
      (arrayheap-make cmp array)))
  (export arrayheap-from-array)

  (fun heapsort! (cmp array)
    (let ((len (array-len array))
          (rev-cmp (lambda (x y) (cmp y x))))
      (do ((i 0 (+ i 1)))
          ((>= i len))
        (bubble-up rev-cmp array i (array-get array i)))
      (do ((last (- len 1) (- last 1)))
          ((<= last 0))
        (array-swap! array 0 last)
        (bubble-down rev-cmp array last 0 (array-get array 0)))
      array))
  (export heapsort!))
