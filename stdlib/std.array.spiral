(module std.array
  (import std.core)

  (fun array-new () (extern spiral_std_array_new))
  (fun array? (val) (extern spiral_std_is_array val))
  (fun array-push! (ary x) (extern spiral_std_array_push ary x))
  (fun array-pop! (ary) (extern spiral_std_array_pop ary))
  (fun array-len (ary) (extern spiral_std_array_len ary))
  (fun array-get (ary idx) (extern spiral_std_array_get ary idx))
  (fun array-set! (ary idx val) (extern spiral_std_array_set ary idx val))
  (export array-new array? array-push! array-pop! array-len array-get array-set!)

  (fun array-empty? (ary) (== (array-len ary) 0))
  (fun array-first (ary) (array-get ary 0))
  (fun array-last (ary) (array-get ary (- (array-len ary) 1)))
  (fun array-each (ary callback)
    (fun iterate (i)
      (if (and (< i (array-len ary)) (callback (array-get ary i)))
        (iterate (+ 1 i))
        false))
    (iterate 0))
  (fun array-swap! (ary idx-1 idx-2)
    (let ((value-1 (array-get ary idx-1))
          (value-2 (array-get ary idx-2)))
      (array-set! ary idx-1 value-2)
      (array-set! ary idx-2 value-1)))
  (fun array-copy (ary)
    (let ((copy-ary (array-new))
          (len (array-len ary)))
      (do ((i 0 (+ i 1)))
          ((>= i len) copy-ary)
        (array-push! copy-ary (array-get ary i)))))
  (export array-empty? array-first array-last array-each array-swap! array-copy)

  (fun array-new-filled (len value)
    (var ary (array-new))
    (do ((i 0 (+ i 1)))
        ((>= i len) ary)
      (array-push! ary value)))
  (export array-new-filled))
