(module std.heap
  (import std)
  (import std.cons)

  (fun node-make (key size left right)
    (tuple-4 key size left right))
  (fun node-key (node) (get-0 node))
  (fun node-size (node) (get-1 node))
  (fun node-left (node) (get-2 node))
  (fun node-right (node) (get-3 node))

  (fun node-size-or-0 (node)
    (if node (node-size node) 0))
  (fun node-singleton (key)
    (node-make key 1 false false))

  (fun heap-make (cmp root)
    (tuple-3 "heap" root cmp))
  (fun heap-root (heap) (get-1 heap))
  (fun heap-cmp (heap) (get-2 heap))

  (fun heap? (heap)
    (and (tuple-3? heap) (eqv? (get-0 heap) "heap")))
  (fun heap-new (cmp)
    (heap-make cmp false))
  (fun heap-singleton (cmp key)
    (heap-make cmp (node-singleton key)))
  (export heap? heap-new heap-singleton)

  (fun heap-len (heap)
    (node-size-or-0 (heap-root heap)))
  (fun heap-empty? (heap)
    (not (heap-root heap)))
  (export heap-len heap-empty?)

  (fun node-merge (cmp left right)
    (cond
      ((and left right)
        (let ((order (cmp (node-key left) (node-key right)))
              (lesser-greater (if (< order 0) (tuple-2 left right) (tuple-2 right left)))
              (lesser (get-0 lesser-greater))
              (greater (get-1 lesser-greater))
              (root-key (node-key lesser))
              (child-1 (node-left lesser))
              (child-2 (node-merge cmp (node-right lesser) greater))
              (size-1 (node-size-or-0 child-1))
              (size-2 (node-size child-2))
              (size (+ (+ size-1 size-2) 1)))
          (if (< size-1 size-2)
            (node-make root-key size child-2 child-1)
            (node-make root-key size child-1 child-2))))
      (left left)
      (right right)
      (true false)))
  (fun heap-merge (heap-1 heap-2)
    (let ((cmp (heap-cmp heap-1))
          (cmp-2 (heap-cmp heap-2)))
      (if (eqv? cmp cmp-2)
        (heap-make cmp (node-merge cmp (heap-root heap-1) (heap-root heap-2)))
        (/ 1 0))))
  (fun heap-insert (heap key)
    (let ((cmp (heap-cmp heap)))
      (heap-make cmp (node-merge cmp (heap-root heap) (node-singleton key)))))
  (export heap-merge heap-insert)

  (fun heap-minimum (heap)
    (node-key (heap-root heap)))
  (fun heap-remove-minimum (heap)
    (let ((cmp (heap-cmp heap)) (root (heap-root heap)))
      (heap-make cmp (node-merge cmp (node-left root) (node-right root)))))
  (export heap-minimum heap-remove-minimum)

  (fun heap-to-list (heap)
    (node-to-list (heap-cmp heap) (heap-root heap)))
  (fun node-to-list (cmp node)
    (fun iter (node acc-elems)
      (if node
        (iter (node-merge cmp (node-left node) (node-right node))
              (cons (node-key node) acc-elems))
        (list-reverse acc-elems)))
    (iter node false))
  (export heap-to-list)

  (fun heap-from-list (cmp elems)
    (heap-make cmp (node-from-list cmp elems)))
  (fun node-from-list (cmp elems)
    (fun iter (elems acc-node)
      (if elems
        (iter (cdr elems) (node-merge cmp (node-singleton (car elems)) acc-node))
        acc-node))
    (iter elems false))
  (export heap-from-list))
