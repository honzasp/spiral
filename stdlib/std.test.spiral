(module std.test
  (import std)
  (import std.array)
  (import std.tuple)
  (import std.string)
  (import (only std.math abs))

  (fun test (title callback)
    (var test-ctx (tuple-1 (array-new)))
    (callback test-ctx)
    (if (array-empty? (get-0 test-ctx))
      (println (str-cat-3 "test " title" ok"))
      (begin
        (println (str-cat-3 "test " title " failed:"))
        (array-each (get-0 test-ctx) (lambda (assert-msg)
          (println (str-cat-2 "  " assert-msg)))))))

  (fun assert (test-ctx value)
    (unless value
      (array-push! (get-0 test-ctx) "expected true")))
  (fun assert-not (test-ctx value)
    (when value
      (array-push! (get-0 test-ctx) 
        (str-cat-2 "expected false, got " (stringify value)))))
  (fun assert-eq (test-ctx value-l value-r)
    (unless (== value-l value-r)
      (array-push! (get-0 test-ctx)
        (str-cat-4 "expected == " (stringify value-l) 
          " " (stringify value-r)))))
  (fun assert-near-eq (test-ctx delta value-l value-r)
    (when (> (abs (- value-l value-r)) delta)
      (array-push! (get-0 test-ctx)
        (str-cat-4 "expected near == " (stringify value-l)
          " " (stringify value-r)))))
  (fun assert-eqv (test-ctx value-l value-r)
    (unless (eqv? value-l value-r)
      (array-push! (get-0 test-ctx)
        (str-cat-4 "expected eqv " (stringify value-l) 
          " " (stringify value-r)))))
  (fun assert-equal (test-ctx value-l value-r)
    (unless (equal? value-l value-r)
      (array-push! (get-0 test-ctx)
        (str-cat-4 "expected equal " (stringify value-l) 
          " " (stringify value-r)))))
  (export test assert assert-not assert-eq assert-near-eq assert-eqv assert-equal))
